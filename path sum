package leetcode;

import java.util.ArrayList;
import java.util.List;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private List<List<Integer>> result = new ArrayList<>();
    public int pathSum(TreeNode root, int sum) {
       // List<Integer> path = new ArrayList<Integer>();
        if (root == null){return 0;}
        helper2(root, sum, result);
        System.out.println(result);
        return result.size();
    }

    private void helper2(TreeNode root, int target,
                        List<List<Integer>> result){
        if(root == null){return;}
        if(root.left != null){helper2(root.left, target, result);}
        if(root.right != null){helper2(root.right, target, result);}
        List<Integer> path = new ArrayList<>();
        helper(root, target, result, path);
    }


    private void helper(TreeNode root, int target,
                        List<List<Integer>> result,
                        List<Integer> path){
        if(root.left == null && root.right == null && root.val != target){
            return;
        }
        if(root.val == target){
            path.add(root.val);
            List<Integer> oneway = new ArrayList<Integer>();
            oneway.addAll(path);
            result.add(oneway);
            path.remove(path.size() - 1);
        }

        if(root.left != null){
            path.add(root.val);
            helper(root.left, target - root.val , result, path);
            path.remove(path.size() - 1);

        }
        if(root.right != null){
            path.add(root.val);
            helper(root.right, target - root.val, result, path);
            path.remove(path.size() - 1);
        }


    }
}


