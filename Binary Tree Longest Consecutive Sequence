public class Solution{
    /**
    *@param root the root of binary tree
    *@return the length of the longest consecutive path
    */
    private longest;
    public int longestConsecutive(TreeNode root){
        longest = 0;
        helper(root);
        return longest;
    
    }
    private int helper(TreeNode){
        if(root == 0){
            return 0;
        }
        int left = longestConsecutive(root.left);
        int right = longestConsecutive(root.right);
        
        int subtreelongest = 1;                            #at least we have root
        if(root.left != null && root.val == root.left.val - 1){
            substreelongest = Math.max(substreelongest, left + 1);
        }
        if(root.right != null && root.val == root.right.val - 1){
            substreelongest = Math.max(substreelongest, right + 1);
        }
        if(longest < subtreelongest){
            longest = subtreelongest;
        }
        return subtreelongest;
    }
}
